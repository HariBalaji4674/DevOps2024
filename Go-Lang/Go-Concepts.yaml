Go lang :
- Created By engineers by Google
- production software is created by java and C++
- Go Was Created to combine
- The ease of programming of an interpreted dynamically typed language (such as python)
- With the efficiency and safety of a statistically types and compiled language (such as c++)
- it also aimed to be modern with support for networked and multi core computing

2007
Robert Griesmer, Rob Pike,Ken Thompson
Compiled Fast So Very fast
It is Compiled Language
No Run Time Required
Concurrency Out Of the BOX
Designed for readability and usability
Compiles for windows,macintosh,linux,Many OS

Go Comments:
- Go supports two type of Comments
- // double slash represents Single comments
- /* */ Double Line Comments

Static and Dynamic Typed Languages:

Static Typed:
- Compiler Throws an Error when we use data type incorrectly
- Explicitly Mention the data type and Gives error when we use data type of another

Dynamic Typed:
- Compiler does not enforce the error when we give incorrect data type
- No Need to mention data type for value or variable

Static Typed Langs: Java, C++
Dynamically Typed Langs: Python, JavaScript

Go Programming Language:
- Go is Both Static and Dynamic typed Language
- it is Fast and secure language

Data Types:

Classification made on the type of data we use in the Programming
Categorize the set of related value
Describe the operations that can be done on them
memory allocation should be done
define the way of data is stored

String : Names in double ( 16 Bytes)
Numbers: Integer, Float, Complex ( 8 Bytes)
Boolean: True & False ( 1 Byte)
Arrays: Sequence of Data Types
Slices: Flexible Arrays with different Data Types
Maps: Key Value Pairs

Variables & Syntax & Dot Notation:

variable is named unit of data
Variables: used to store the information or data
Keywords : var <variable-name> <data-type> = <value>
var, :=
cont name str
var age int

String Formatting:

fmt.Printf("Formatting the string")
%v = Formats the Value in a Default Format
%d = Decimal Formatting
%c = For Characters/Strings
%q = Quoted Characters
%s = Plain Strings
%f = For Floating Point Numbers

fmt.Println("User : %c ", name)

ShortHand Variable Declaration:
s := "hello world"
fmt.Println(s)

Variable Scope:
Block is defined in go represents { }
Brace Brackets inside another brackets represents inner block

Scopes:
- Variables in Go
  - Global levels
  - Local Variables
  - Package Level Variables

Zero Values:

No Initialization after declaring the variable called Zero Values

User Input:
% Scanf
fmt.Scanf("%s",&red)

Scanf Return Two Values : count and Error

Find Type of Variable:
%T : will  show the type of data type
reflect.TypeOf()

Type Casing: Converting One data type To another

var i int = 90
var f float64 = float64(i)

# strconv package
strconv.Itoa (): converts integer to string
returns one value string formed with the given number

strconv.Atoi() : Converts String to Integer

Constants:
Syntax: const <variable-name> <data type> = <value>

% Operators & Operands :

Comparison Operators
== , >= , <= , !=

Logical Operators
&& , || , !

Bitwise Operators
AND (&) , OR (|) , NOT(!), <<(Left Shift), >>(Right Shift)

Arithmetic Operators
+, -, /, %, *, --, ++

Assignment Operators
=, +=, -+, /=, %=

% Control Flows :

Conditions:
if-else
if else-if else
Switch Case and FallThrough

Arrays:
- Arrays are the data structure to store multiple values with same kind and fixed value
- Homogeneous Data will be stored
- Fixed Length
- Element should be of same type

Slices:
- slices are like arrays storing multiple values with same kind and flexible values
- can increase the size of an array

Loops:
- Iterate through the work
- Constant Loop
- Only one Loop

Types of Loops:
syntax of For loop:
for index,value := range array,slice,maps {
 fmt.Println(index,value)
}
- Infinite Loop
- for loop with index and range

Packages in Go:
- go programs can be organized into packages

Maps:

- Key Value Pairs
- Un-Ordered Collection of data types
- Implemented by hash tables
- Provide efficient add,delete,get and delete

var <map_name> map[<key_data_type]<value_data_type>
var <map_name> map[<string>] int

Adding Key-Values to Map:
<map_name> := map[<key_data_type>]<value_data_type>{<key-value-pair>}

My_Map := map[string]int{"id1":1234,"id2":6789}

Functions:
- Built-In functions
- Custom Created Functions
- Declaring Functions
- Self

Types of Functions:
- Normal Function
- Veriadic Function == Any Number of parameter can be passed with ... (slice method)
- Recursive Function
- Anonymous Functions
- High Order Functions
- Defer Statement

Function Parameters and Function Arguments

func <function-name> (params) <return type> {

}

Veriadic Function:
Can pass any number of arguments to the function

Blank Identifier: '-'
- This Represents the Single Value

Anonymous Function:
A Function without any name is called Anonymous Function

High Order Function:
- A Function that receives a function as a parameter or gives output as a function is called High Order Function

Defer Statement:
- Defer Statement delays the execution of a function until the surrounding function returns
- Deferred call's arguments are evaluated immediately but the function call is not executed until the surrounding function returns

Pointers:
- Pointer is a variable that hold memory address of another variable
- Points out the Variable Memory address
- They Point where the memory is allocated and provide ways to find or even change the value located at the memory location

var ptr *int := &x

Address and Dereference Operators:
- Address is obtained by = & operator
- dereference operator = * operator

Declaring and Initializing Pointer:

declaring : var <pointer_name> *<data_type>

var ptr_i *int
var ptr_s *string

Initializing: var <pointer_name> *<data_type> = &(variable_name)

var ptr_i *int = &(number)
var ptr_s *string = &(string)

var ptr = &s

ptr := &s

Passing By Value :

Function is called by directly passing the value of the variable as an argument

The parameter is copied into another location of your memory

so when accessing or modifying the variable within your function only the copy is accessed or modified and the original value is value is never modified

All Basic types int float string array are passed by value

Pass By Reference:
Go Supports pointers allowing you to pass reference to values within your program

in call by reference/pointer the address of the variable is passed into the function call as the actual parameter

all the operations in the function are performed on the value stored at the address of the actual parameters

Structs:

- User Defined Data Type
- These are mapped together different types of data types
- The Maps which is used to store different data types in grouped order is called the Structs




